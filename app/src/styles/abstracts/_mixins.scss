@use "./variables" as *;
@use "../base/animations" as *;
@mixin btn-secondary-styles {
  &.btn {
    &.btn-secondary {
      &:not(:has(svg)):not(.datBtn) {
        height: 2.45rem;
      }
    }
  }
}
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}
@mixin btnColored($bcolor1, $bcolor2, $tcolor) {
  background: radial-gradient(circle at bottom left, $bcolor1, $bcolor2);
  border: transparent;
  color: $tcolor;
  &:not(.datBtn) {
    height: 2.3rem;
  }
}
@mixin carded {
  width: 100%;
  min-width: 14.3rem;
}
@mixin scb-webkit {
  scroll-behavior: smooth;
}
@mixin flexCenter {
  display: flex;
  align-items: center;
  justify-content: center;
}
@mixin fCt {
  @include flexCenter;
  align-content: center;
  justify-items: center;
}
@mixin fCNoW {
  display: flex;
  flex-flow: column nowrap;
}
@mixin fNoW {
  display: flex;
  flex-wrap: nowrap;
}
@mixin fRNoW {
  display: flex;
  flex-flow: row nowrap;
}
@mixin fStart {
  display: flex;
  align-items: flex-start;
  align-content: flex-start;
  vertical-align: middle;
}
@mixin form-border {
  border: var(--bs-border-width) solid var(--bs-border-color);
  border-radius: var(--bs-border-radius);
  box-shadow: 0.2vh 0.2vh 0.2vh grey;
}
@mixin form-clip {
  background-clip: padding-box;
  margin: 0;
  padding: 0.7rem;
  line-height: 1.5;
}
@mixin maxCGapped($num, $unit) {
  width: max-content;
  column-gap: #{$num}#{$unit};
}
@mixin maxSize($num1, $unit1, $num2, $unit2) {
  max-width: #{$num1}#{$unit1};
  max-height: #{$num2}#{$unit2};
}
@mixin minMaxW($num1, $unit1, $num2, $unit2) {
  min-width: #{$num1}#{$unit1};
  max-width: #{$num2}#{$unit2};
}
@mixin modal($size, $left, $z) {
  @include fCNoW;
  @include modalDlgBSLike;
  @include size($size, "vw", "max-content", "");
  left: #{$left}#{"%"};
  background-color: #fff;
  padding: 2rem;
  border-radius: 0.5rem;
  box-shadow: 0 0 0.6rem #0000004d;
  z-index: $z;
  &::backdrop {
    background-color: #00000080;
  }
}
@mixin modalDlgBSLike() {
  position: relative;
  animation: dropIn 0.3s ease-out forwards, fadeIn 0.6s ease-in-out forwards;
}
@mixin noSpace {
  padding: 0;
  margin: 0;
}
@mixin size($num1, $unit1, $num2, $unit2) {
  width: #{$num1}#{$unit1};
  height: #{$num2}#{$unit2};
}
@mixin symGap($num) {
  column-gap: #{$num}vw;
  row-gap: #{$num}vh;
}
@mixin widCGap($num1, $unit1, $num2, $unit2) {
  width: #{$num1}#{$unit1};
  column-gap: #{$num2}#{$unit2};
}
@mixin validityWarn($color) {
  display: block;
  height: 0.8rem;
  color: $color;
}
@mixin formCheckOpaque {
  opacity: 0.3;
  margin-right: 0.4rem;
  &:checked {
    opacity: 1;
    accent-color: mintcream;
    &.form-check-input {
      background-color: mintcream;
      border-color: mintcream;
    }
  }
}
@mixin fixGenWid {
  width: $inpGenWidFix;
  max-width: $inpGenWidFix;
}
@mixin goldenLock {
  height: 100%;
  justify-content: center;
  background-color: transparent;
  padding-right: 2%;
  padding-left: 2%;
  border-radius: var(--bs-border-radius);
  margin: 0;
  padding-left: 1vw;
  padding: 0.375rem 0.75rem;
  line-height: 1.5;
  color: var(--bs-body-color);
  background-color: var(--bs-body-bg);
  box-shadow: 0.2vh 0.2vh 0.2vh grey;
  background-clip: padding-box;
  border: var(--bs-border-width) solid var(--bs-border-color);
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  &.sumMsr,
  &.indMsr {
    border-radius: 0;
  }
  svg {
    line {
      stroke: grey;
    }
    path {
      &.svg-lock-hook,
      &.svg-unlock-hook {
        fill: grey;
      }
      &.svg-lock-body,
      &.svg-unlock-body {
        stroke: grey;
        fill: url(#gradiente-lock);
      }
    }
  }
}
